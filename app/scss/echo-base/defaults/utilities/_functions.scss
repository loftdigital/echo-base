//==============================================================================
//
//  echo-base/defaults/utilities/_functions.scss
//
//  ----------------------------------------------------------------------------
//  Table of contents
//  ----------------------------------------------------------------------------
//  a. Breakpoints
//      1. Setup breakpoints
//      2. Get breakpoint
//      3. Stringify breakpoints
//      4. Setup Key List
//      5. Setup config list
//      6. Breakpoint range
//  b. Palette
//      1. Setup palettes
//      2. Get palette
//  c. Helpers
//      1. Strip Unit
//      2. Remify
//      3. Rem Calc
//
//
//  @copyright 2015, Loft Digital, www.weareloft.com
//  Licensed under MIT (https://github.com/loftdigital/echo-base/blob/develop/LICENSE)
//
//==============================================================================

/// $global-page-font-size is the base font size for the document / page.
///
/// @group Global
/// @type String

$global-page-font-size: 16px !default;

/// $global-palette-base-fallback allows you to specify whether you would like the palette
/// map to use a default tone called 'base' in your custom palette maps.
/// If set to true not providing a specific tone within a palette map will return an error
/// whereas if this is set to true the tone named base will be returned if it exists.
///
/// @group Global
/// @type Boolean

$global-palette-base-fallback: true;




//==============================================================================
//  a. Breakpoints
//==============================================================================

//  1. Setup breakpoints
//==============================================================================

/// $breakpoints will hold the result of the merge between the default breakpoints
/// map in breakpoints.scss and the custom breakpoints map from settings.scss.
///
/// @group Breakpoints
/// @type Map

$breakpoints: ();

/// This function will check to see if custom breakpoints have been specified
/// within the $custom-breakpoints map within the _settings.scss file.
///
/// If custom breakpoints have been specified it will return a new map which
/// comprises the contents of $default-breakpoints and $custom-breakpoints.
///
/// If no custom breakpoints are specified only the default breakpoints will be
/// returned.
///
/// @access private
/// @group Breakpoints
/// @return {Map}

@function setup-breakpoints() {

    @if (length($custom-breakpoints) > 0) {
        @return map-merge($default-breakpoints, $custom-breakpoints);
    }
    @return $default-breakpoints;
}



//  2. Get breakpoint
//==============================================================================

/// The break function is used within the Breakpoint mixin.
///
/// It is used to pull the specified key from the breakpoints map, first it sets
/// the map returned from our setup-breakpoints function and assigns it to a
/// $breakpoints variable.
///
/// Using the sass function map-has-key it then looks to see if the key passed
/// to the function exists in the map. If the key does exist it returns that
/// key's value else it returns a sass warning.
///
/// @access private
/// @group Breakpoints
/// @param {String} $key - Breakpoint map key
/// @return {Map}

@function breakpoint($key) {

    $breakpoints: ();

    @if (length($breakpoints) == 0) {
        $breakpoints: setup-breakpoints();
    }

    @if (map-has-key($breakpoints, $key)) {
        @return map-get($breakpoints, $key);
    } @else {
        @return false;
    }
}



//  3. Stringify breakpoint - breakpoint-stringify()
//==============================================================================

/// Used by the breakpoint mixin.
///
/// This function is passed a possible list of media query breakpoint keys for the breakpoint map
/// and a possible list of other media query values such as orientation, resolution. If these lists
/// aren't provided it will set the values to false by default.
///
/// The aim of the function is to return a complete string of media query parameters ready formatted
/// for the mixin to output.
///
/// Two other functions setup-key-list() and setup-config-list() are crucial to this happening.
///
/// @access private
/// @group Breakpoints
/// @param {List} $key-list - Possible list of breakpoint keys
/// @param {List} $extra-config - Possible list of extra media query flags such as oritentation etc
/// @return {String}


@function breakpoint-stringify($key-list: false, $extra-config: false) {

    $output: '';

    @if ($key-list != false) {
        $output: setup-key-list($key-list);
    }

    @if ($key-list != false and $extra-config != false) {
        $output: $output + ' and ';
    }

    @if($extra-config != false) {
        $output: $output + setup-config-list($extra-config);
    }

    @return $output;
}



//  4. Setup Key List - setup-key-list()
//==============================================================================

/// Used by the breakpoint-stringify().
///
/// Takes the list of breakpoint keys and formats them correctly for use within
/// a media query. Takes into account the number of keys passed to it allowing
/// for key ranges to be specified. Also takes into account whether the mobile first
/// option is enabled and will pump out the min/max width statements accordingly.
///
/// @access private
/// @group Breakpoints
/// @param {List} $key-list - List of breakpoint keys
/// @return {String}


@function setup-key-list($key-list: false) {

    $key-string: '';
    $flow: max-width;

    @if ($mobile-first == true) {
        $flow: min-width;
    }

    @if (length($key-list) > 1) {
        $key-string: breakpoint-range(nth($key-list, 1), nth($key-list, 2));
    } @else {

        $breakpoint: nth($key-list, 1);

        @if (type-of(nth($key-list, 1)) != number) {
            $breakpoint: breakpoint(nth($key-list, 1));
        }

        $key-string: '(' + $flow + ': ' + $breakpoint + ')';
    }

    @return $key-string;
}



//  5. Setup Config List - setup-config-list()
//==============================================================================

/// Used by the breakpoint-stringify().
///
/// Takes the list of other breakpoint flags and formats them correctly for use within
/// a media query. Takes into account the number of options passed to it allowing
/// for multiple linked statements.
///
/// @access private
/// @group Breakpoints
/// @param {List} $extra-config - List of breakpoint keys
/// @return {String}

@function setup-config-list($extra-config: false) {

    $config-string: '';

    @for $i from 1 through length($extra-config) {

        $item: '';

        @if ($i > 1) {
            $item: ' and ';
        }

        $item: $item + '(' + nth($extra-config, $i) + ')';

        $config-string: $config-string + $item;
    }

    @return $config-string;
}



//  6. breakpoint-range
//==============================================================================

/// Used by the breakpoint mixin and more specifically called from setup-key-list()
///
/// If multiple breakpoint keys are specified within the breakpoint mixin this function
/// will be used to organise them into a properly formatted range argument.
///
/// This function will also arrange the two keys depending on the users mobile-first option
/// allowing the breakpoint keys to be specified in any order.

/// @access private
/// @param {Mixed} $primary - A named breakpoint or value
/// @param {Mixed} $secondary - A named breakpoint or value
/// @group Breakpoints
/// @return {String}


@function breakpoint-range($primary, $secondary) {

    @if type-of($primary) != number {
        @if breakpoint($primary) != false {
            $primary: breakpoint($primary);
        }
    }

    @if type-of($secondary) != number {
        @if breakpoint($secondary) != false {
            $secondary: breakpoint($secondary);
        }
    }

    $vals: ($secondary, $primary);

    @if $primary >= $secondary {
        $vals: ($primary, $secondary);
    }

    @if $mobile-first == true {

        @return '(min-width: ' + nth($vals, 2) + ') and (' + 'max-width: ' + nth($vals, 1) + ')';

    } @else {

        @return '(max-width: ' + nth($vals, 1) + ') and (' + 'min-width: ' + nth($vals, 2) + ')';

    }
}




//==============================================================================
//  b. Palettes
//==============================================================================

//  1. Setup palettes
//==============================================================================

/// This function will check to see if custom palettes have been specified
/// within the $custom-palettes map within the _settings.scss file.
///
/// If custom palettes have been specified then this function will return a new
/// map which comprises the contents of $default-palettes and $custom-palettes.
///
/// If no custom palettes are specified only the default palette map will be
/// returned.
///
/// @access private
/// @group Palettes
/// @return {Map}

@function setup-palettes() {
    // Create an empty map holder
    $palettes: ();

    // Include if custom palettes are in use
    @if (length($custom-palettes) > 0) {
        $palettes: map-merge($default-palettes, $custom-palettes);
    } @else {
        $palettes: $default-palettes;
    }

    // Include third-party palette if enabled
    @if ($use-third-party-palette) {
        $palettes: map-merge($palettes, $third-party-palettes);
    }

    @return $palettes;
}



//  2. Get palette
//==============================================================================

/// Retrieves a single color or a color map from the global palette map
///
/// @access private
/// @group Palettes
/// @param {number} $iterator - Used to loop through the keys parameter
/// @param {object} $type - Can be a map or color
/// @param {map} $map - The map that we're searching
/// @param {list} $keys... - A list of a varying length containing the keys used
/// to get the desired color or map
/// @return {color}

@function get-palette($iterator, $type, $map, $keys...) {
    $i: $iterator;
    $key: nth($keys, $i);

    // Check if the passed nth key exists in the map
    @if (map-has-key($map, $key)) {
        $value: map-get($map, $key);

        // Check if value is map and if there are any more keys to utilise
        @if ((type-of($value) == map) and ($i < length($keys))) {
            // Increase iterator by 1 so that we get a new key value to play
            // with then re-run this function
            $i: $i + 1;
            @return get-palette($i, $type, $value, $keys...);
        }

        // Once we're iterated through all the $keys list values and have stored
        // the required value, lets check that it is of the desired type
        @return get-palette-of-type($value, $type);
    } @else {
        @warn $key + ' doesn\'t exist in your palettes.';
    }
}



//  2. Get palette of defined type
//==============================================================================

/// Checks and returns either the desired palette type or returns a type
/// missmatch error
///
/// @access private
/// @group Palettes
/// @param {map} $item -  A specific key to be used to get the desired color or
/// map
/// @param {object} $type - Can be a map or color
/// @return {color}

@function get-palette-of-type($item, $type) {
    @if (type-of($item) == $type) {
        @return $item;
    } @else {
        @if ($global-palette-base-fallback) {
            @return base-fallback($item, $type);
        } @else {
            @warn 'Wrong object type returned from palettes. Expecting ' + $type + ', got ' + type-of($item) + '!';
            @return false;
        }
    }
}


//  3. Base fallback - defaults to base if enabled
//==============================================================================

/// If the user is after the base color from a tone map of a color, it is not
/// required to pass the value base
///
/// @access private
/// @group Palettes
/// @param {map} $item - A specific key to be used to get the desired color or
/// map
/// @param {object} $type - Can be a map or color
/// @return {color}

@function base-fallback($item, $type) {
    @if ((type-of($item) == map) and ($type == color)) {
        @return map-get($item, 'base');
    }

    @warn 'Wrong object type returned from palettes. Expecting ' + $type + ', got ' + type-of($item) + '!';
}



//  4. Get color from palette
//==============================================================================

/// Retrieves a color from the global palette map
///
/// @access public
/// @group Palettes
/// @param {list} $items... - A list of a varying length containing the keys
/// used to get the desired color or map
/// @return {color} a color value
///
/// @example scss - Our custom palette map setup in _settings.scss
///
/// primary-colors: (
///   red: (
///     light: rgb(255, 200, 200),
///     base: rgb(255, 100, 100),
///     dark: rgb(100, 0, 0)
///   ),
///   blue: (
///     light: rgb(200, 200, 255),
///     base: rgb(100, 100, 255),
///     dark: rgb(0, 0, 100)
///   )
/// );
///
/// @example scss - Get the specific tone of a color
/// // Usage - SCSS
///
/// .block {
///   color: palette(primary-colors, red, light);
/// }
///
/// // Output - CSS
///
/// .block {
///   color: rgb(255, 200, 200);
/// }
///
/// @example scss - Get the base tone of a color (base fallback enabled)
///
/// // Usage - SCSS
///
/// .block {
///   color: palette(primary-colors, blue);
/// }
///
/// // Output - CSS
///
/// .block {
///   color: rgb(100, 100, 255);
/// }

@function palette($items...) {
    $palettes: setup-palettes();
    $result: get-palette(1, color, $palettes, $items...);

    @return $result;
}



//  5. Get map from palette
//==============================================================================

/// Retrieves a map from the global palette map, this can be useful for iterating
/// over colour maps.
///
/// @access public
/// @group Palettes
/// @param {list} $items...
/// @return {map} A palette map
///
/// @example scss - Our custom palette map setup in _settings.scss
///
/// primary-colors: (
///   red: (
///     light: rgb(255, 200, 200),
///     base: rgb(255, 100, 100),
///     dark: rgb(100, 0, 0)
///   )
/// );
///
/// @example scss - using a palette map to create a modifier class for each palette tone
/// // Usage - SCSS
///
/// .test-class {
///     @each $tone, $colval in palette-map(primary-colors, red) {
///         &--#{$tone} {
///             background-color: $colval;
///         }
///     }
/// }
///
/// // output - CSS
/// .test-class--light {
///     background-color: #ffc8c8;
/// }
///
/// .test-class--base {
///     background-color: #ff6464;
/// }
///
/// .test-class--dark {
///     background-color: #640000;
/// }

@function palette-map($items...) {
    $palettes: setup-palettes();
    $result: get-palette(1, map, $palettes, $items...);

    @return $result;
}




//==============================================================================
//  c. Helpers
//==============================================================================

//  1. Strip Unit
//==============================================================================

/// Strips the units from the passed in value e.g. 16px becomes 16
///
/// @access private
/// @group Helpers
/// @param {String} $value - Value to be stripped of unit
/// @return {Int}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}



//  2. Remify
//==============================================================================

/// Appends the rem unit to the passed in value
///
/// @access private
/// @group Helpers
/// @param {Int} $value - Value to append rem unit to
/// @return {String} - returns the value as a rem unit

@function remify($value) {
    $rem-base: strip-unit($global-page-font-size);
    $value: strip-unit($value);

    @if ($value == 0) {
        @return 0;
    } @else {
        @return $value / $rem-base * 1rem;
    }
}



//  3. Rem Calc
//==============================================================================

/// Turns a pixel unit into a rem unit based on the global-page-font-size
///
/// @access public
/// @group Helpers
/// @param {Int|String} $values - Values to remify
/// @return {String}
///
/// @example scss - Our $global-page-font-size setting left at the default 16px in _settings.scss
///
/// $global-page-font-size: 16px;
///
/// @example scss - useage with single or a map of arguments
///
/// .foo {
///     font-size: rem-calc(32px);
/// }
///
/// .bar {
///     margin: rem-calc(16px, 32px, 18px, 12px);
/// }
///
/// @example css - CSS output
///
/// .foo {
///     font-size: 2rem;
/// }
///
/// .bar {
///     margin: 1rem 2rem 1.125rem 0.75rem;
/// }
///
/// @example scss - Our $global-page-font-size setting set to 32px in _settings.scss
///
/// $global-page-font-size: 32px;
///
/// @example scss - useage with single or a map of arguments
///
/// .foo {
///     font-size: rem-calc(32px);
/// }
///
/// .bar {
///     margin: rem-calc(16px, 32px, 18px, 12px);
/// }
///
/// @example css - CSS output
///
/// .foo {
///     font-size: 1rem;
/// }
///
/// .bar {
///     margin: 0.5rem 1rem 0.5625rem 0.375rem;
/// }

@function rem-calc($pxvalues...) {
    $num-vals: length($pxvalues);

    @if ($num-vals <= 0) {

        @warn 'You need to supply at least one value to rem-calc';

    } @else if ($num-vals > 4) {

        @warn 'You\'ve supplied too many values to rem-calc';

    } @else {
        $rem-values: ();

        @each $val in $pxvalues {
            $rem-values: append($rem-values, remify($val));
        }

        @return #{$rem-values};
    }
}
